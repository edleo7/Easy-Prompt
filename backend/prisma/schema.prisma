// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  passwordHash String
  name         String?
  avatarUrl    String?
  plan         String       @default("FREE") // FREE, BASIC, PRO, ENTERPRISE
  memberships  Membership[]
  workspaces   Workspace[]
  subscriptions Subscription[]
  paymentOrders PaymentOrder[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Workspace {
  id           String        @id @default(cuid())
  name         String
  ownerId      String
  owner        User          @relation(fields: [ownerId], references: [id])
  memberships  Membership[]
  tasks        Task[]
  templates    Template[]
  knowledgeBases KnowledgeBase[]
  apiKeys      ApiKey[]
  subscriptions Subscription[]
  creditLedgers CreditLedger[]
  chatSessions ChatSession[]
  evalDatasets EvalDataset[]
  evalRuns     EvalRun[]
  memoryItems  MemoryItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Membership {
  id           String   @id @default(cuid())
  role         String   // OWNER, ADMIN, MEMBER
  userId       String
  workspaceId  String
  user         User     @relation(fields: [userId], references: [id])
  workspace    Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

model ApiKey {
  id           String    @id @default(cuid())
  name         String
  keyHash      String
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  createdAt    DateTime  @default(now())
}

model Task {
  id           String    @id @default(cuid())
  name         String
  type         String    // PROMPT, VISION, CHAT
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  templateId   String?
  template     Template? @relation(fields: [templateId], references: [id])
  kbId         String?
  kb           KnowledgeBase? @relation(fields: [kbId], references: [id])
  variables    String?   // JSON string
  createdById  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Template {
  id           String   @id @default(cuid())
  name         String
  type         String   // PROMPT, VISION, CHAT
  systemText   String?
  userText     String?
  variables    String?  // JSON string: [{key,desc,required,default}]
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  tasks        Task[]
  chatSessions ChatSession[]
  evalRuns     EvalRun[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model KnowledgeBase {
  id           String     @id @default(cuid())
  name         String
  description  String?
  workspaceId  String
  workspace    Workspace  @relation(fields: [workspaceId], references: [id])
  files        File[]
  documents    Document[]
  tasks        Task[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model File {
  id           String   @id @default(cuid())
  kbId         String
  kb           KnowledgeBase @relation(fields: [kbId], references: [id])
  name         String
  mimeType     String
  size         Int
  storageUrl   String
  status       String   @default("pending") // pending, processing, completed, failed
  errorMessage String?
  processedAt  DateTime?
  chunks       DocChunk[]
  documents    Document[]
  createdAt    DateTime @default(now())
}

model DocChunk {
  id         String  @id @default(cuid())
  fileId     String
  file       File    @relation(fields: [fileId], references: [id])
  documentId String?
  document   Document? @relation(fields: [documentId], references: [id])
  chunkIndex Int
  content    String
  vector     String? // Base64 encoded embedding
  metadata   String? // JSON string
  createdAt  DateTime @default(now())
}

model Document {
  id         String     @id @default(cuid())
  name       String
  content    String
  kbId       String
  kb         KnowledgeBase @relation(fields: [kbId], references: [id])
  fileId     String?
  file       File?      @relation(fields: [fileId], references: [id])
  status     String     @default("processed") // processed, failed
  chunks     DocChunk[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model ChatSession {
  id           String  @id @default(cuid())
  title        String?
  workspaceId  String
  kbIds        String  // JSON string array
  templateId   String?
  model        String?
  createdById  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  template     Template? @relation(fields: [templateId], references: [id])
  createdAt    DateTime @default(now())
  messages     Message[]
}

model Message {
  id           String  @id @default(cuid())
  sessionId    String
  session      ChatSession @relation(fields: [sessionId], references: [id])
  role         String
  content      String
  tokens       Int?
  latencyMs    Int?
  createdAt    DateTime @default(now())
}

model MemoryItem {
  id           String   @id @default(cuid())
  scope        String   // USER, WORKSPACE
  workspaceId  String?
  userId       String?
  content      String
  weight       String   @default("NORMAL") // HIGH, NORMAL
  tags         String   // JSON string array
  workspace    Workspace? @relation(fields: [workspaceId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model EvalDataset {
  id           String  @id @default(cuid())
  name         String
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  items        String  // JSON string: [{input, expected?, vars?}]
  evalRuns     EvalRun[]
  createdAt    DateTime @default(now())
}

model EvalRun {
  id           String  @id @default(cuid())
  workspaceId  String
  templateId   String?
  taskId       String?
  datasetId    String
  model        String
  metrics      String  // JSON string: {exact, bleu, rouge, llm-judge}
  result       String  // JSON string: 明细
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  template     Template? @relation(fields: [templateId], references: [id])
  dataset      EvalDataset @relation(fields: [datasetId], references: [id])
  createdAt    DateTime @default(now())
}

model Subscription {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  workspaceId   String?
  workspace     Workspace? @relation(fields: [workspaceId], references: [id])
  planId        String
  status        String    // active, cancelled, expired, trial
  startDate     DateTime
  endDate       DateTime
  autoRenew     Boolean   @default(true)
  paymentMethod String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model CreditLedger {
  id           String  @id @default(cuid())
  workspaceId  String
  delta        Int
  reason       String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  createdAt    DateTime @default(now())
}

model PaymentOrder {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  planId         String
  amount         Int       // 以分为单位
  currency       String    @default("usd")
  status         String    // pending, completed, failed, cancelled
  gateway        String    // stripe, paypal, alipay, wechat
  gatewayOrderId String?
  paymentUrl     String?
  description    String?
  metadata       String?   // JSON string
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model ErrorLog {
  id        String   @id @default(cuid())
  level     String   // DEBUG, INFO, WARN, ERROR
  message   String
  metadata  String?  // JSON string
  timestamp DateTime @default(now())
}

model SystemMetrics {
  id                String   @id @default(cuid())
  requests          Int      @default(0)
  errors            Int      @default(0)
  avgProcessingTime Int?     // 毫秒
  memoryUsage       String?  // JSON string
  cpuUsage          String?  // JSON string
  timestamp         DateTime @default(now())
}

model ApiLog {
  id             String   @id @default(cuid())
  userId         String?
  method         String
  endpoint       String
  statusCode     Int
  processingTime Int      // 毫秒
  userAgent      String?
  ip             String?
  createdAt      DateTime @default(now())
}

model BatchTask {
  id             String    @id @default(cuid())
  type           String    // file_processing, vector_creation, batch_search
  status         String    // pending, processing, completed, failed, partial
  totalItems     Int
  processedItems Int       @default(0)
  failedItems    Int       @default(0)
  metadata       String?   // JSON string
  createdAt      DateTime  @default(now())
  completedAt    DateTime?
}
