// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  passwordHash String
  name         String?
  avatarUrl    String?
  memberships  Membership[]
  workspaces   Workspace[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Workspace {
  id           String        @id @default(cuid())
  name         String
  ownerId      String
  owner        User          @relation(fields: [ownerId], references: [id])
  memberships  Membership[]
  tasks        Task[]
  templates    Template[]
  knowledgeBases KnowledgeBase[]
  apiKeys      ApiKey[]
  subscriptions Subscription[]
  creditLedgers CreditLedger[]
  chatSessions ChatSession[]
  evalDatasets EvalDataset[]
  evalRuns     EvalRun[]
  memoryItems  MemoryItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Membership {
  id           String   @id @default(cuid())
  role         String   // OWNER, ADMIN, MEMBER
  userId       String
  workspaceId  String
  user         User     @relation(fields: [userId], references: [id])
  workspace    Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

model ApiKey {
  id           String    @id @default(cuid())
  name         String
  keyHash      String
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  createdAt    DateTime  @default(now())
}

model Task {
  id           String    @id @default(cuid())
  name         String
  type         String    // PROMPT, VISION, CHAT
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  templateId   String?
  template     Template? @relation(fields: [templateId], references: [id])
  kbId         String?
  kb           KnowledgeBase? @relation(fields: [kbId], references: [id])
  variables    String?   // JSON string
  createdById  String
  
  // 新增项目管理字段
  description  String?   // 项目描述
  status       String    @default("draft") // draft/active/completed/archived
  tags         String?   // JSON数组，标签
  coverImage   String?   // 封面图URL
  promptCount  Int       @default(0) // Prompt数量统计
  lastAccessedAt DateTime? // 最后访问时间
  
  // 关联关系
  prompts      Prompt[]  // 项目下的Prompt列表
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Prompt {
  id           String   @id @default(cuid())
  taskId       String
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  name         String   // Prompt名称
  content      String   // Prompt内容
  version      Int      @default(1) // 版本号
  variables    String?  // 变量配置（JSON）
  kbReferences String?  // 知识库引用（JSON）
  status       String   @default("draft") // draft/published
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([taskId])
}

model Template {
  id           String   @id @default(cuid())
  name         String
  type         String   // PROMPT, VISION, CHAT
  systemText   String?
  userText     String?
  variables    String?  // JSON string: [{key,desc,required,default}]
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  tasks        Task[]
  chatSessions ChatSession[]
  evalRuns     EvalRun[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model KnowledgeBase {
  id           String   @id @default(cuid())
  name         String
  description  String?
  coverImage   String?  // 封面图URL
  tags         String?  // JSON数组，标签
  fileCount    Int      @default(0) // 文档数量
  collaborators String? // JSON数组，协作者ID
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  files        File[]
  folders      Folder[]
  tasks        Task[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model File {
  id           String   @id @default(cuid())
  kbId         String
  kb           KnowledgeBase @relation(fields: [kbId], references: [id])
  folderId     String?
  folder       Folder?  @relation(fields: [folderId], references: [id])
  name         String
  mimeType     String
  size         Int
  storageUrl   String
  editorType   String   @default("markdown") // "markdown" | "richtext"
  content      String?  // 文档内容
  
  // 新增字段：文件上传与多模态支持
  fileType      String   @default("document") // 'document' | 'uploaded'
  originalName  String?  // 原始文件名
  fileFormat    String?  // pdf, docx, xlsx, jpg, mp4等
  uploadUrl     String?  // 云存储URL
  localPath     String?  // 开发环境本地路径
  fileSize      Int?     // 文件大小（字节）
  extractedText String?  // 提取的文本内容
  thumbnail     String?  // 缩略图URL
  metadata      String?  // JSON: {pages, duration, resolution等}
  processingStatus String @default("pending") // pending, processing, completed, failed
  
  chunks       DocChunk[]
  fileChunks   FileChunk[] // 上传分片
  knowledgeChunks KnowledgeChunk[] // 知识块
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model DocChunk {
  id         String  @id @default(cuid())
  fileId     String
  file       File    @relation(fields: [fileId], references: [id])
  idx        Int
  text       String
  embedding  String? // Base64 encoded embedding
  metadata   String? // JSON string
}

model ChatSession {
  id           String  @id @default(cuid())
  title        String?
  workspaceId  String
  kbIds        String  // JSON string array
  templateId   String?
  model        String?
  createdById  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  template     Template? @relation(fields: [templateId], references: [id])
  createdAt    DateTime @default(now())
  messages     Message[]
}

model Message {
  id           String  @id @default(cuid())
  sessionId    String
  session      ChatSession @relation(fields: [sessionId], references: [id])
  role         String
  content      String
  tokens       Int?
  latencyMs    Int?
  createdAt    DateTime @default(now())
}

model MemoryItem {
  id           String   @id @default(cuid())
  scope        String   // USER, WORKSPACE
  workspaceId  String?
  userId       String?
  content      String
  weight       String   @default("NORMAL") // HIGH, NORMAL
  tags         String   // JSON string array
  workspace    Workspace? @relation(fields: [workspaceId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model EvalDataset {
  id           String  @id @default(cuid())
  name         String
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  items        String  // JSON string: [{input, expected?, vars?}]
  evalRuns     EvalRun[]
  createdAt    DateTime @default(now())
}

model EvalRun {
  id           String  @id @default(cuid())
  workspaceId  String
  templateId   String?
  taskId       String?
  datasetId    String
  model        String
  metrics      String  // JSON string: {exact, bleu, rouge, llm-judge}
  result       String  // JSON string: 明细
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  template     Template? @relation(fields: [templateId], references: [id])
  dataset      EvalDataset @relation(fields: [datasetId], references: [id])
  createdAt    DateTime @default(now())
}

model Subscription {
  id           String  @id @default(cuid())
  workspaceId  String
  planId       String
  status       String
  expireAt     DateTime
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  createdAt    DateTime @default(now())
}

model CreditLedger {
  id           String  @id @default(cuid())
  workspaceId  String
  delta        Int
  reason       String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  createdAt    DateTime @default(now())
}

model Folder {
  id           String   @id @default(cuid())
  name         String
  kbId         String
  kb           KnowledgeBase @relation(fields: [kbId], references: [id])
  parentId     String?
  parent       Folder?  @relation("FolderTree", fields: [parentId], references: [id])
  children     Folder[] @relation("FolderTree")
  files        File[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// 文件上传分片表
model FileChunk {
  id           String   @id @default(cuid())
  fileId       String
  file         File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  chunkIndex   Int      // 分片索引
  chunkData    Bytes    // 分片数据
  uploaded     Boolean  @default(false)
  createdAt    DateTime @default(now())
  
  @@unique([fileId, chunkIndex])
}

// 知识块表（多模态知识提取）
model KnowledgeChunk {
  id           String   @id @default(cuid())
  fileId       String
  file         File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  type         String   // text, image, table, code
  content      String   // 文本内容
  metadata     String?  // JSON: {page, position, caption}
  embedding    String?  // 向量（可选）
  createdAt    DateTime @default(now())
  
  @@index([fileId])
}
